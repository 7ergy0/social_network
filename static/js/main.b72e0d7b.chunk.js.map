{"version":3,"sources":["api/Api.ts","redux/dialogs-reducer.ts","assets/images/users.png","components/Users/user/User.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","redux/users-reducer.ts","redux/auth-Reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","common/pagination/Pagination.tsx","components/Users/user/User.tsx","components/Users/Users.tsx","utils/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/login/Login.tsx","hoc/WithSuspense.tsx","App.tsx","rerenderEntireTree.tsx","index.tsx","common/formsControls/FormsControls.module.css","common/formsControls/FormsControls.tsx","assets/images/preloader.gif","components/Preloader/Preloader.tsx","common/pagination/Pagination.module.css","utils/validators/Validators.tsx","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["ResultCode","instant","axios","create","withCredentials","baseURL","headers","securityApi","getCaptchaUrl","get","then","response","data","usersApi","getUsers","currentPage","pageSize","profileApi","defaultUser","userId","getStatus","updateStatus","status","put","setPhoto","image","formData","FormData","append","_boundary","setProfile","profile","authApi","getMyProfile","login","email","password","rememberMe","captchaUrl","post","logout","delete","followApi","followUser","id","unfollowUser","SEND_MESSAGE","initialState","messagesData","message","dialogsData","name","sendMessageActionCreator","addMessageBody","type","dialogsReducer","state","action","body","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","utilsFunction","stateUsers","actionUserId","followed","map","m","FOLLOW","UN_FOLLOW","SET_USER","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setUser","toggleIsFetching","toggleIsFollowing","followUnfollowFlow","dispatch","methodApi","actionCreator","a","resultCode","usersReducer","totalCount","filter","SET_AUTH_DATA","SET_CAPTCHA_URL","isAuth","setAuthData","payload","getAuthUserData","success","url","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebarPage","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","n","navbar","item","to","activeClassName","activeLink","Pagination","totalItemsCount","onPageChanged","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","s","paginator","onClick","f","selectedPage","e","User","user","props","src","photos","small","usersPhoto","disabled","some","unfollow","follow","fullName","Users","getPageSize","getTotalUsersCount","getCurrenPage","getIsFetching","getFollowingInProgress","UserContainer","pageNumber","this","pageTitle","Preloader","React","Component","compose","connect","bind","page","items","Header","header","loginBlock","logoutProfile","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","onSubmit","href","target","Field","placeholder","component","Input","validate","required","error","formError","loginProfile","messages","length","stopSubmit","_error","values","trim","WithSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","UsersContainer","withRouter","rerenderEntireTree","ReactDOM","document","getElementById","getState","subscribe","FormControl","input","meta","hasError","touched","formControl","children","Textarea","restProps","preloader","style","width","height","value","undefined","maxLength","max","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS_PROFILE","SET_PHOTO_PROFILE","SET_EDIT_PROFILE","postsData","likesCount","addPostActionCreator","addMyPost","setStatusProfile","setPhotoProfile","defaultProfile","getStatusProfile","updateStatusProfile","savePhotoProfile","large","saveProfile","newPost","postId"],"mappings":"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","file":"static/js/main.b72e0d7b.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\nimport {PhotosType, ProfileType} from \"../types\";\r\n\r\n\r\n\r\nconst instant=axios.default.create({\r\n    withCredentials:true,\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:{\r\n        'API-KEY':'61907893-90f0-49c6-affa-c8246b74a48d'\r\n    }\r\n})\r\n\r\nexport const securityApi={\r\n    getCaptchaUrl(){\r\n        return instant.get('security/get-captcha-url')\r\n            .then(response=>response.data)\r\n    }\r\n};export const usersApi={\r\n    getUsers(currentPage:number,pageSize:number){\r\n        return instant.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response=>response.data)\r\n    }\r\n};\r\nexport const profileApi={\r\n    defaultUser(userId:number){\r\n        return instant.get<ProfileType>('profile/'+userId)\r\n            .then(response=>response.data)\r\n    },\r\n    getStatus(userId:number){\r\n        return instant.get('profile/status/'+userId)\r\n            .then(response=>response.data)\r\n    },\r\n    updateStatus(status:string){\r\n        return instant.put<ProfileStatusType>('profile/status',{status:status})\r\n            .then(response=>response.data)\r\n    },\r\n    setPhoto(image:any){\r\n        let formData=new FormData();\r\n        formData.append('file', image);\r\n        return instant.put<UpdatePhotoType>('profile/photo',formData,{\r\n            headers:{\r\n\r\n                'Content-Type': `multipart/form-data; boundary=${image._boundary}`,\r\n            }\r\n        })\r\n            .then(response=>response.data)\r\n    },\r\n    setProfile(profile:ProfileType){\r\n        return instant.put<ProfileStatusType>('profile',profile)\r\n            .then(response=>response.data)\r\n    }\r\n};\r\nexport const authApi={\r\n    getMyProfile(){\r\n        return instant.get<AuthMeType>('auth/me')\r\n            .then(response=>response.data)\r\n    },\r\n    login(email:string,password:string,rememberMe:boolean,captchaUrl:any){\r\n        return instant.post<LoginLogoutType>('auth/login',{email,password,rememberMe,captchaUrl})\r\n            .then(response=>response.data)\r\n    },\r\n    logout(){\r\n        return instant.delete<LoginLogoutType>('auth/login')\r\n            .then(response=>response.data)\r\n    }\r\n};\r\nexport const followApi={\r\n    followUser(id:number){\r\n        return instant.post('follow/'+id)\r\n            .then(response=>response.data)\r\n    },\r\n    unfollowUser(id:number){\r\n        return instant.delete('follow/'+id)\r\n            .then(response=>response.data)\r\n    }\r\n};\r\nexport enum ResultCode{\r\n    success=0,\r\n    error=1\r\n}\r\n\r\ntype ProfileStatusType<D={}>={\r\n    resultCode: ResultCode\r\n    messages: string[]\r\n    data: D\r\n\r\n}\r\ntype UpdatePhotoType={\r\n    data:PhotosType\r\n    resultCode:ResultCode\r\n    messages: string[]\r\n}\r\ntype DataType={\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthMeType={\r\n    data: DataType\r\n    resultCode: ResultCode\r\n    messages: string[]\r\n\r\n}\r\ntype LoginLogoutType={\r\n    resultCode: ResultCode\r\n    messages: string[]\r\n    data: DataType\r\n\r\n}","import {ActionsType} from \"./store\";\r\n\r\n\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\"\r\n//const UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\"\r\n\r\ntype MessageType={\r\n    id:number\r\n    message:string\r\n}\r\ntype DialogsType={\r\n    id:number\r\n    name:string\r\n}\r\n\r\nconst initialState= {\r\n        messagesData: [\r\n            {id: 1, message: \"Hi!\"},\r\n            {id: 2, message: \"How are you?!\"},\r\n            {id: 3, message: \"Hi!\"},\r\n            {id: 4, message: \"Hi!\"}\r\n        ] as Array<MessageType>,\r\n        dialogsData: [\r\n            {id: 1, name: \"Sergey\"},\r\n            {id: 2, name: \"Alexey\"},\r\n            {id: 3, name: \"Aleksandr\"},\r\n            {id: 4, name: \"Olga\"}\r\n        ] as Array<DialogsType>\r\n    };\r\n\r\nexport type initialDialogsPageType=typeof initialState\r\n\r\nconst dialogsReducer = (state:initialDialogsPageType=initialState, action: ActionsType):initialDialogsPageType=> {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = {id: 5, message: action.addMessageBody }\r\n            return {...state,\r\n                messagesData:[...state.messagesData,body]}\r\n            // let stateCopy={...state}\r\n            // stateCopy.messagesData=[...state.messagesData]\r\n            // stateCopy.messagesData.push(body)\r\n            // stateCopy.newMessageBody = \"\"\r\n            //return stateCopy;\r\n        // case UPDATE_NEW_MESSAGE_BODY:\r\n        //     return {...state,\r\n        //         newMessageBody:action.body}\r\n            // let stateCopy2={...state}\r\n            // stateCopy2.newMessageBody = action.body\r\n            // return stateCopy2;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\nexport const sendMessageActionCreator = (addMessageBody:string)=>\r\n    ({type: SEND_MESSAGE,addMessageBody}) as const\r\n// export const updateNewMessageBodyActionCreator = (text: string)=>\r\n//     ({type: UPDATE_NEW_MESSAGE_BODY,\r\n//     body: text\r\n// }) as const\r\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/users.3567196b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photos\":\"User_photos__3upI-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2MT3M\",\"item\":\"Navbar_item__1obtN\",\"activeLink\":\"Navbar_activeLink__2qdB9\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsType} from \"./store\";\r\n\r\n\r\nconst initialState={}\r\n\r\nconst sidebarReducer=(state=initialState,action:ActionsType)=>{\r\n\r\n\r\n\r\n    return state\r\n}\r\nexport default sidebarReducer;","\r\n\r\nexport const utilsFunction=(stateUsers:any,id:string,actionUserId:any,followed:any)=>{\r\nreturn stateUsers.map((m:any) => {\r\n        if (m[id] === actionUserId) {\r\n            return {...m, ...followed}\r\n        }\r\n        return m\r\n    })\r\n}\r\n\r\n","import {ActionsType} from \"./store\";\r\nimport {followApi, usersApi} from \"../api/Api\";\r\nimport {Dispatch} from \"@reduxjs/toolkit\";\r\nimport {UsersType} from \"../types\";\r\nimport {utilsFunction} from \"../utils/object-helpers\";\r\n\r\n\r\n\r\nconst FOLLOW = \"user/FOLLOW\"\r\nconst UN_FOLLOW = \"user/UN-FOLLOW\"\r\nconst SET_USER = \"user/SET-USER\"\r\nconst SET_CURRENT_PAGE = \"user/SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"user/SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"user/TOGGLE-IS-FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING = \"user/TOGGLE-IS-FOLLOWING\"\r\n\r\n\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    users: [] as UsersType[],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as number[],\r\n};\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: utilsFunction(state.users,\"id\",action.userId,{followed:true})\r\n            }\r\n        case UN_FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: utilsFunction(state.users,\"id\",action.userId,{followed:false})\r\n            };\r\n        case SET_USER:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case TOGGLE_IS_FOLLOWING:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId}) as const\r\nexport const unfollowSuccess = (userId: number) => ({type: UN_FOLLOW, userId}) as const\r\nexport const setUser = (users: UsersType[]) => ({type: SET_USER, users}) as const\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\nexport const setTotalUsersCount = (totalCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalCount}) as const\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleIsFollowing = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(toggleIsFetching(true));\r\n    dispatch(setCurrentPage(page));\r\n    let data=await usersApi.getUsers(page, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUser(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n};\r\nconst followUnfollowFlow=async (userId:number,dispatch:Dispatch,methodApi:any,actionCreator:any)=>{\r\n    dispatch(toggleIsFollowing(true,userId));\r\n    let data=await methodApi(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowing(false,userId));\r\n}\r\n\r\n\r\nexport const unfollow = (userId:number) => async (dispatch: Dispatch) => {\r\n    // let methodApi=followApi.unfollowUser.bind(followApi)\r\n    // let actionCreator=unfollowSuccess;\r\n    followUnfollowFlow(userId,dispatch,followApi.unfollowUser.bind(followApi),unfollowSuccess)\r\n};\r\n\r\nexport const follow = (userId:number) => async (dispatch: Dispatch) => {\r\n\r\n    followUnfollowFlow(userId,dispatch,followApi.followUser.bind(followApi),followSuccess)\r\n};\r\nexport default usersReducer;","import {ActionsType} from \"./store\";\r\nimport {Dispatch} from \"@reduxjs/toolkit\";\r\nimport {authApi, ResultCode, securityApi} from \"../api/Api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nimport {RootThunkTypes} from \"./redux-store\";\r\n\r\n\r\nconst SET_AUTH_DATA = \"auth/SET_AUTH_DATA\"\r\nconst SET_CAPTCHA_URL = \"auth/SET_CAPTCHA_URL\"\r\n\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n\r\n};\r\ntype initialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_AUTH_DATA:\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: SET_AUTH_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n}) as const\r\nexport const setCaptchaUrl = (captchaUrl: string|null) => ({type: SET_CAPTCHA_URL, payload: {captchaUrl}}) as const\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n\r\n    let data = await authApi.getMyProfile();\r\n    if (data.resultCode === ResultCode.success) {\r\n        dispatch(setAuthData(data.data.id, data.data.email, data.data.login, true));\r\n    }\r\n};\r\nexport const loginProfile = (email: string, password: string, rememberMe: boolean,captchaUrl=null): RootThunkTypes => async (dispatch) => {\r\n    let data = await authApi.login(email, password, rememberMe,captchaUrl)\r\n    if (data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        dispatch(getCaptchaUrl())\r\n        let message = data.messages.length > 0 ? data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n\r\n    }\r\n\r\n}\r\nexport const getCaptchaUrl = (): RootThunkTypes => async (dispatch) => {\r\n    let data = await securityApi.getCaptchaUrl()\r\n    dispatch(setCaptchaUrl(data.url))\r\n}\r\nexport const logoutProfile = () => async (dispatch: Dispatch) => {\r\n    let data = await authApi.logout()\r\n    if (data.resultCode === 0) {\r\n        dispatch(setAuthData(null, null, null, false))\r\n    }\r\n}\r\nexport default authReducer;\r\n\r\n\r\n\r\n\r\n\r\n","import {ActionsType} from \"./store\";\r\nimport {Dispatch} from \"@reduxjs/toolkit\";\r\nimport {getAuthUserData} from \"./auth-Reducer\";\r\n\r\n\r\n\r\nconst INITIALIZED_SUCCESS=\"INITIALIZED_SUCCESS\"\r\n\r\n\r\nlet initialState={\r\n   initialized:false\r\n\r\n};\r\ntype initialStateType=typeof initialState\r\n\r\nexport const appReducer=(state:initialStateType=initialState,action:ActionsType):initialStateType=>{\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized:true\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const initializedSuccess=()=>({type:INITIALIZED_SUCCESS}) as const\r\n\r\nexport const initializeApp=()=>(dispatch:Dispatch)=>{\r\nlet promise=dispatch<any>(getAuthUserData())\r\n    promise.then(()=>{\r\n        dispatch(initializedSuccess())\r\n    })\r\n};\r\n\r\nexport default appReducer;\r\n\r\n\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-Reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\nimport {ActionsType} from \"./store\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const rootReducers=combineReducers({\r\n    profilePage:profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    sidebarPage:sidebarReducer,\r\n    usersPage:usersReducer,\r\n    auth:authReducer,\r\n    form:formReducer,\r\n    app:appReducer\r\n})\r\n\r\nexport type RootStateType=ReturnType<typeof rootReducers>\r\n\r\nexport type RootThunkTypes<ReturnType=void>=ThunkAction<ReturnType, RootStateType, unknown, ActionsType>\r\n\r\nlet store=createStore(rootReducers,applyMiddleware(thunkMiddleware));\r\n\r\n\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store=store","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport n from './Navbar.module.css'\r\n\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <nav className={n.navbar}>\r\n            <div className={n.item}>\r\n                <NavLink to={\"/profile\"} activeClassName={n.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={n.item}>\r\n                <NavLink to={\"/dialogs\"} activeClassName={n.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={n.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={n.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={n.item}>\r\n                <NavLink to={\"/users\"} activeClassName={n.activeLink}>Find Users</NavLink>\r\n            </div>\r\n            <div className={n.item}>\r\n                <a >Settings</a>\r\n            </div>\r\n\r\n        </nav>\r\n\r\n\r\n    )\r\n}\r\nexport default Navbar;","import React, {useState} from \"react\";\r\nimport s from \"./Pagination.module.css\"\r\n\r\n\r\ntype PaginationType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\n\r\nfunction Pagination({totalItemsCount, pageSize, currentPage, onPageChanged, ...props}: PaginationType) {\r\n\r\n    let portionSize = 10\r\n    let pageCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++)\r\n        pages.push(i)\r\n    let portionCount = Math.ceil(pageCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = (portionNumber * portionSize)\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(f => f >= leftPortionPageNumber && f <= rightPortionPageNumber)\r\n                .map(m => <span className={currentPage === m ? s.selectedPage : s.pages}\r\n                                key={m}\r\n                                onClick={(e) => {\r\n                                    onPageChanged(m)\r\n                                }}>{m}</span>\r\n                )}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React from \"react\";\r\nimport s from \"./User.module.css\";\r\nimport usersPhoto from \"../../../assets/images/users.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UsersType} from \"../../../types\";\r\n\r\n\r\n\r\n\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nfunction User({user, ...props}: UserPropsType) {\r\n\r\n    return <div>\r\n          <div key={user.id}>\r\n                    <span>\r\n                        <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : usersPhoto} className={s.photos}/>\r\n                        </NavLink>\r\n                            </div>\r\n                        <div>\r\n                            {\r\n                                user.followed\r\n                                    ? <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                                              onClick={() => {\r\n                                                  // props.toggleIsFollowing(true,m.id)\r\n                                                  //   followApi.unfollowUser(m.id)\r\n                                                  //       .then(data => {\r\n                                                  //           if (data.resultCode === 0) {\r\n                                                  //               props.unfollow(m.id)\r\n                                                  //           }\r\n                                                  //           props.toggleIsFollowing(false,m.id)\r\n                                                  //       });\r\n                                                  props.unfollow(user.id);\r\n                                              }}>unfollow</button>\r\n                                    : <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                                              onClick={() => {\r\n                                                  // props.toggleIsFollowing(true,m.id)\r\n                                                  //  followApi.followUser(m.id)\r\n                                                  //      .then(data => {\r\n                                                  //          if (data.resultCode === 0) {\r\n                                                  //              props.follow(m.id)\r\n                                                  //          }\r\n                                                  //          props.toggleIsFollowing(false,m.id)\r\n                                                  //      });\r\n                                                  props.follow(user.id);\r\n\r\n                                              }}>follow</button>\r\n                            }\r\n\r\n                            </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                        <div>{user.fullName}</div>\r\n                        <div>{user.status}</div>\r\n                            </span>\r\n<span>\r\n    <div>{\"m.location.city\"}</div>\r\n    <div>{\"m.location.country\"}</div>\r\n</span>\r\n\r\n\r\n                    </span>\r\n\r\n\r\n                </div>)\r\n\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport {UsersType} from \"../../types\";\r\nimport Pagination from \"../../common/pagination/Pagination\";\r\nimport User from \"./user/User\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UsersType[]\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nfunction Users({totalUsersCount, pageSize, currentPage, onPageChanged, ...props}: UsersPropsType) {\r\n\r\n    return <div>\r\n        <Pagination totalItemsCount={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                    currentPage={currentPage}\r\n                    onPageChanged={onPageChanged}/>\r\n        {\r\n            props.users.map((m) => <User key={m.id}\r\n                                         user={m}\r\n                                         unfollow={props.unfollow}\r\n                                         follow={props.follow}\r\n                                         followingInProgress={props.followingInProgress}/>)\r\n        }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {RootStateType} from \"../redux/redux-store\";\r\n\r\nexport const getUsers=(state:RootStateType)=>{\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize=(state:RootStateType)=>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount=(state:RootStateType)=>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrenPage=(state:RootStateType)=>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching=(state:RootStateType)=>{\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress=(state:RootStateType)=>{\r\n    return state.usersPage.followingInProgress\r\n}","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nimport {\r\n    follow, requestUsers,\r\n    unfollow,\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {\r\n    getCurrenPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../utils/users-selectors\";\r\nimport {UsersType} from \"../../types\";\r\n\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: UsersType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching:boolean\r\n    followingInProgress:any\r\n\r\n}\r\ntype OwnPropsType={\r\n    pageTitle:string\r\n}\r\ntype UserContainerType={\r\n    pageTitle:string\r\n    getUsers:(currentPage:number,pageSize:number)=>void\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n}\r\n// type mapDispatchToPropsType = {\r\n//     followAction: (userId: number) => void\r\n//     unfollowAction: (userId: number) => void\r\n//     setUserAction: (users: UsersType[]) => void\r\n//     setCurrentAction: (pageNumber: number) => void\r\n//     setTotalUsersCountAction: (totalCount: number) => void\r\n//     toggleIsFetchingAction:(isFetching:boolean)=>void\r\n// }\r\n\r\nexport type UsersContainerTypes = MapStateToPropsType & UserContainerType & OwnPropsType//& mapDispatchToPropsType\r\n\r\nclass UserContainer extends React.Component<UsersContainerTypes> {\r\n\r\n    componentDidMount() {\r\n       //  this.props.toggleIsFetching(true)\r\n       // usersApi.getUsers(this.props.currentPage,this.props.pageSize).then(data => {\r\n       //      this.props.toggleIsFetching(false)\r\n       //      this.props.setUser(data.items)\r\n       //      this.props.setTotalUsersCount(data.totalCount)\r\n       //  })\r\n        const {currentPage,pageSize}=this.props\r\n        this.props.getUsers(currentPage,pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        // this.props.toggleIsFetching(true)\r\n        // this.props.setCurrentPage(pageNumber);\r\n        const {pageSize}=this.props\r\n       this.props.getUsers(pageNumber,pageSize);\r\n        //     this.props.setUser(data.items)\r\n        //     this.props.toggleIsFetching(false)\r\n        // })\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            {\r\n                this.props.isFetching?\r\n                   <div>\r\n                       <Preloader/>\r\n                   </div>\r\n                    :null\r\n            }\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   unfollow={this.props.unfollow}\r\n                   follow={this.props.follow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        // users: state.usersPage.users,\r\n        // pageSize: state.usersPage.pageSize,\r\n        // totalUsersCount: state.usersPage.totalUsersCount,\r\n        // currentPage: state.usersPage.currentPage,\r\n        // isFetching:state.usersPage.isFetching,\r\n        // followingInProgress:state.usersPage.followingInProgress\r\n\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrenPage(state),\r\n        isFetching:getIsFetching(state),\r\n        followingInProgress:getFollowingInProgress(state)\r\n\r\n    }\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n//     return {\r\n//         followAction: (userId: number) => {\r\n//             dispatch(follow(userId))\r\n//         },\r\n//         unfollowAction: (userId: number) => {\r\n//             dispatch(unfollow(userId))\r\n//         },\r\n//         setUserAction: (users: UsersType[]) => {\r\n//             dispatch(setUser(users))\r\n//         },\r\n//         setCurrentAction: (pageNumber: number) => {\r\n//             dispatch(setCurrentPage(pageNumber))\r\n//         },\r\n//         setTotalUsersCountAction: (totalCount: number) => {\r\n//             dispatch(setTotalUsersCount(totalCount))\r\n//         },\r\n//         toggleIsFetchingAction: (isFetching:boolean) => {\r\n//             dispatch(toggleIsFetching(isFetching))\r\n//         }\r\n//     }\r\n\r\n}\r\n\r\nexport default compose<ComponentType>(connect<MapStateToPropsType,{},OwnPropsType,RootStateType>(mapStateToProps,\r\n    {follow,unfollow,getUsers: requestUsers}))(UserContainer);","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport n from './Header.module.css'\r\n\r\n\r\nfunction Header(props: any) {\r\n    return (\r\n        <header className={n.header}>\r\n            <img src=\"https://sweetcrudereports.com/wp-content/uploads/2018/07/Total-1-e1531433364798.jpg\"/>\r\n\r\n            <div className={n.loginBlock}>\r\n                {props.isAuth ?\r\n                    <div>{props.login}-<button onClick={props.logoutProfile}>log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {ComponentType, ReactNode} from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutProfile} from \"../../redux/auth-Reducer\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean,\r\n    login: string\r\n}\r\ntype HeaderContainerType = mapStateToPropsType\r\n\r\nclass HeaderContainer extends React.Component<any, HeaderContainerType> {\r\n\r\n\r\n    render():ReactNode {\r\n        return (\r\n\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {logoutProfile}))(HeaderContainer);","import React, {ComponentType} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from '../../common/formsControls/FormsControls.module.css'\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {loginProfile} from \"../../redux/auth-Reducer\";\r\n\r\ntype CaptchaUrlType={\r\n    captchaUrl:any\r\n}\r\ntype LoginFormType={\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captchaUrl:any\r\n\r\n}\r\n\r\nfunction LoginForm({captchaUrl,...props}:CaptchaUrlType & InjectedFormProps<LoginFormType,CaptchaUrlType>){\r\n\r\n    const {handleSubmit}=props\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <p>\r\n                To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                            target={'_blank'}>here</a>\r\n            </p>\r\n            <p>\r\n                or use common test account credentials:\r\n            </p>\r\n            <p> Email: free@samuraijs.com\r\n            </p>\r\n            <p>\r\n                Password: free\r\n            </p>\r\n            <div>\r\n            <Field placeholder={'email'} name={'email'} component={Input} validate={required}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'} name={'password'} component={Input} type={'password'} validate={required}/>\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/>remember me\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && <Field name={\"captcha\"} component={\"input\"} placeholder={\"Symbols from image\"} />}\r\n            {\r\n                props.error && <div className={s.formError}>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nlet LoginReduxForm = reduxForm<LoginFormType,CaptchaUrlType>({form: 'login'})(LoginForm)\r\ntype mapStateToPropsType={\r\n    isAuth:any\r\n    captchaUrl:any\r\n    //getAuthUserData:(email:string,password:string,rememberMe:boolean)=>void\r\n}\r\nfunction Login(props:any){\r\n    const onSubmit=(values:LoginFormType)=>{\r\n        props.loginProfile(values.email.trim(),values.password,values.rememberMe,values.captchaUrl)\r\n    }\r\n    if(props.isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n\r\n    </div>\r\n}\r\nconst mapStateToProps=(state:RootStateType):mapStateToPropsType=>({\r\n    captchaUrl:state.auth.captchaUrl,\r\n    isAuth:state.auth.isAuth\r\n\r\n})\r\nexport default compose<ComponentType>( connect(mapStateToProps,{loginProfile}))(Login)","import {Component, ComponentType, Suspense} from \"react\";\r\n\r\n\r\nexport function WithSuspense<T>(Component: ComponentType<T>){\r\n    return function (props: any){\r\n        return <Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props as T}/>\r\n        </Suspense>\r\n    }\r\n}","import React, {ComponentType, ReactNode} from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/Preloader/Preloader\";\r\nimport {RootStateType} from \"./redux/redux-store\";\r\nimport {WithSuspense} from \"./hoc/WithSuspense\";\r\n\r\n\r\nconst DialogsContainer=React.lazy(() =>\r\n    import(\"./components/Dialogs/DialogsContainer\"))\r\nconst ProfileContainer=React.lazy(() =>\r\n    import(\"./components/Profile/ProfileContainer\"))\r\n\r\n\r\ntype AppType=mapStateToProps\r\n\r\n\r\n\r\ntype mapStateToProps={\r\n    initialized:boolean\r\n}\r\n\r\nclass App extends React.Component<any,AppType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render():ReactNode {\r\n        if(!this.props.initialized){\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path='/dialogs' render={WithSuspense(DialogsContainer)}/>\r\n                    <Route path='/profile/:userId?' render={WithSuspense(ProfileContainer)}/>\r\n                    <Route path='/users' render={() => <UsersContainer/>}/>\r\n                    <Route path='/login' render={() => <Login/>}/>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nlet mapStateToProps=(state:RootStateType)=>({\r\n    initialized:state.app.initialized\r\n})\r\n\r\nexport default compose<ComponentType>(withRouter,connect(mapStateToProps,{initializeApp}))(App);\r\n","import ReactDOM from \"react-dom\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport store, {RootStateType} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\n\r\n\r\nexport let rerenderEntireTree = (state:RootStateType) => {\r\n\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n            <App/>\r\n            </Provider>\r\n        </BrowserRouter>, document.getElementById('root'));\r\n}","\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/redux-store\";\r\nimport {rerenderEntireTree} from \"./rerenderEntireTree\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nrerenderEntireTree(store.getState());\r\n\r\nstore.subscribe(()=> {\r\n    let state = store.getState()\r\n    rerenderEntireTree(state);\r\n});\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__11l9J\",\"error\":\"FormsControls_error__1Sc_P\",\"formError\":\"FormsControls_formError__3MfMy\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl=({input,meta,...props}:any)=>{\r\n    const hasError=meta.touched && meta.error;\r\n    return(\r\n        <div className={`${s.formControl} ${hasError?s.error:\"\"}`}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function Textarea(props:any){\r\n    const {input,meta,children,...restProps}=props\r\n    return( <FormControl{...props}> <textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\nexport function Input(props:any) {\r\n    const {input, meta, children, ...restProps} = props\r\n    return (<FormControl{...props}> <input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.5c8d1eb4.gif\";","import React from \"react\";\r\nimport preloader from \"../../assets/images/preloader.gif\";\r\n\r\n\r\n\r\n\r\n\r\nfunction Preloader(){\r\n    return(\r\n        <div >\r\n            <img src={preloader} style={{width:\"50px\", height:\"50px\"}} />\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Pagination_paginator__34SkS\",\"selectedPage\":\"Pagination_selectedPage__1-kzV\",\"pages\":\"Pagination_pages__3R8Dq\"};","import React from \"react\";\r\n\r\n\r\n\r\nexport const required=(value:number)=>(value?undefined:'Field is required');\r\n\r\n\r\nexport const maxLength=(max:number)=>(value:any)=>(value && value.length>max?`Must be ${max} symbols or less`:undefined);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1-vWD\",\"loginBlock\":\"Header_loginBlock__JGh_X\"};","import {ActionsType} from \"./store\";\r\nimport {profileApi, ResultCode} from \"../api/Api\";\r\nimport {PostType, ProfileType} from \"../types\";\r\nimport {RootThunkTypes} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nconst ADD_POST = \"profile/ADD-POST\"\r\nconst DELETE_POST = \"profile/DELETE-POST\"\r\n//const UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\"\r\nconst SET_USER_PROFILE=\"profile/SET-USER-PROFILE\"\r\nconst SET_STATUS_PROFILE=\"profile/SET-STATUS-PROFILE\"\r\nconst SET_PHOTO_PROFILE=\"profile/SET-PHOTO-PROFILE\"\r\nconst SET_EDIT_PROFILE=\"profile/SET-EDIT-PROFILE\"\r\n\r\n\r\nlet initialState={\r\n        postsData: [\r\n            {id: 1, message: \"How are you\", likesCount: 12},\r\n            {id: 2, message: \"It' my first post\", likesCount: 34},\r\n            {id: 3, message: \"How are you?\", likesCount: 32}\r\n        ] as Array<PostType>,\r\n    profile:null as ProfileType|null,\r\n    status:\"\",\r\n    };\r\nexport type initialStateType=typeof initialState\r\n\r\nconst profileReducer = (state=initialState, action: ActionsType):initialStateType=> {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {id: 5, message: action.addMyPost, likesCount: 0}\r\n            return {...state,\r\n                postsData:[...state.postsData,newPost],};\r\n        case DELETE_POST:\r\n            return {...state,postsData: state.postsData.filter(f=>f.id!==action.postId)}\r\n\r\n        //-------------Рефакторинг------------------\r\n            // let newPost = {id: 5, message: state.newPostText, likesCount: 0};\r\n            // let stateCopy={...state}\r\n            // stateCopy.postsData=[...state.postsData];\r\n            // stateCopy.postsData.push(newPost)\r\n            // stateCopy.newPostText = \"\"\r\n            //return stateCopy;\r\n\r\n        // case UPDATE_NEW_POST_TEXT:\r\n        // return {...state,\r\n        //     newPostText:action.newText};\r\n\r\n            // let stateCopy2={...state}\r\n            // stateCopy2.newPostText = action.newText\r\n            // return stateCopy2;\r\n        case SET_USER_PROFILE:\r\n            return {...state,\r\n            profile: action.profile};\r\n        case SET_STATUS_PROFILE:\r\n            return {...state,\r\n            status: action.status};\r\n        case SET_PHOTO_PROFILE:\r\n            return {...state,\r\n                profile:action.image}\r\n        case SET_EDIT_PROFILE:\r\n            return {...state,\r\n            profile: action.profile}\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\nexport const addPostActionCreator = (addMyPost:string) =>({type: ADD_POST,addMyPost}) as const\r\nexport const deletePostActionCreator = (postId:number) =>({type: DELETE_POST,postId}) as const\r\n//export const updateNewPostTextActionCreator = (text: string)=>({type: UPDATE_NEW_POST_TEXT, newText: text}) as const\r\nexport const setUserProfile=(profile:ProfileType)=>({type:SET_USER_PROFILE,profile}) as const\r\nexport const setStatusProfile=(status:string)=>({type:SET_STATUS_PROFILE,status}) as const\r\nexport const setPhotoProfile=(image:any)=>({type:SET_PHOTO_PROFILE,image}) as const\r\nexport const setEditProfile=(profile:ProfileType)=>({type:SET_EDIT_PROFILE,profile}) as const\r\n\r\n\r\nexport const defaultProfile=(userId:number):RootThunkTypes=>async (dispatch)=>{\r\n    let data=await profileApi.defaultUser(userId);\r\n        dispatch(setUserProfile(data));\r\n};\r\nexport const getStatusProfile=(userId:number):RootThunkTypes=>async (dispatch)=>{\r\n    let data= await profileApi.getStatus(userId);\r\n        dispatch(setStatusProfile(data))\r\n};\r\nexport const updateStatusProfile=(status:string):RootThunkTypes=>async (dispatch)=>{\r\n    let data=await profileApi.updateStatus(status);\r\n        if( data.resultCode===ResultCode.success ){\r\n            dispatch(setStatusProfile(status))\r\n        }\r\n};\r\nexport const savePhotoProfile=(image:any):RootThunkTypes=>async (dispatch)=>{\r\n    let data=await profileApi.setPhoto(image);\r\n        if( data.resultCode===ResultCode.success ){\r\n            dispatch(setPhotoProfile(data.data.large))\r\n        }\r\n};\r\nexport const saveProfile=(profile:ProfileType):RootThunkTypes=>async (dispatch,getState)=>{\r\n   const userId:any=getState().auth.userId\r\n    const data=await profileApi.setProfile(profile);\r\n        if( data.resultCode===ResultCode.success ){\r\n            dispatch(defaultProfile(userId))\r\n        }else {\r\n            dispatch(stopSubmit(\"contacts\",{_error:data.messages[0]}))\r\n            // dispatch(setEditProfile(data.data))\r\n        }\r\n};\r\n\r\nexport default profileReducer;"],"sourceRoot":""}